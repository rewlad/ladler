
instant indexed:
  session.sessionKey
  ev.sessionId
  undo.undoneId
  reqEv.isRequested
  commitEv.committedReqId
  commitEv.committedSessionId
main:
  0.lastMergedId

isRequested -- no more undo-s for ev-s le by session, only undo-s by merger

concurrency, exceptions, lifecycle:
  exception kills connection
  scopes are mostly connection
  instant/main are selecting by attr
  tx/snapshot scoped values will have lazy resettable wrapper
  instantDB write can only add events
remember times:
  app
  connection
  snapshot / ro Tx
  vDom / dbEvent
  frame / message handling
  mTx / rw Tx


merger connection iteration:
  try-with mainDB rw:
    try
      try-with instantDB read:
        get first with isRequested gt lastMergedId that is not undone;
        handle according to its none|committed by later ev
    finally:
      try-with instantDB rw:
        err: add undo
        not yet committed: add commit

ui do iteration:
  switch mainDB off
  inside dispatch can be:
    try-with instantDB rw: add event
    reset vDom or tx

ui fresh snapshot:
  sessionLastMergedId = gt last committed and merged request for this session --
  -- rev committedSessionId -> for reverse -> rel committedReqId -> until le lastMergedId

ui next view iteration:
  switch mainDB mux
  try
    try-with instantDB read:
      loop
        get first with our sessionId gt sessionLastMergedId that is not undone;
        handle
      view
  finally:
    send vDomDiff or error
    
    
    
    
    
    
    
{
    open connection
    while{
        open snapshot
        apply events
        while{
            build vDom
            while{
                recv event
            
            }
        }
    }
    close connection
}
connection
  snapshot / ro Tx
  vDom / dbEvent
  frame / message handling
  mTx / rw Tx

ConcurrentLinkedQueue?

////////////////////////////////////////////////////////////////////////////////

ideas:

Obj static checking;

tag builder:
    child[] vs tagging
    ',' vs '::';
    or mutable:
        ptag().has{
            ctag()
            ctag()
        }
        ptag returns existing builder;
        has runs after its args and marks end;
        
        
date, time? client/server? http://www.daterangepicker.com/
select
redir
later: non-existing object binding
filtering, sorting, 
later: pagging

////////////////////////////////////////////////////////////////////////////////

event-sourcing +
react +

is server-centric?
is scala? type-safe modular dsl
see macwire
h2 isolation, locks? need SERIALIZABLE
postgre/h2, kafka?

is h2 optimizer good?
how do tables map to mvstore?

Rx:
sql ==> many non-optimal reads
depend on range ==> depend on prefix
on change cascade del, on read calc undefined;
on change recalc stop -- (-) dead expressions;
just change, on read check valid -- (-) sum of all values;
?merger will not calc view <-> only on merged

goals:
savepoints (eventsrc: undo, multiver world, bonus for scaling)
(logic+data)-in-process: UI, DB
100M facts
fast graph traversing
lazy-calc-with-implicit-deps
offline? bonus
modular (+static attrs)




demo run in inet
2 roles of developers

